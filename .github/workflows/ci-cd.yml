name: Azure AKS CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

# âœ… REMOVE THIS ENTIRE BLOCK (it triggers OIDC)
# permissions:
#   id-token: write
#   contents: read

env:
  AZURE_RESOURCE_GROUP: devops-aks-proj-rg
  AZURE_AKS_CLUSTER: devops-aks-proj-aks
  ACR_LOGIN_SERVER: devopsaksprojacr.azurecr.io
  APP_IMAGE_NAME: flask-app
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Azure Login & ACR Authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 3. Build & Push Docker Image
        run: |
          az acr login --name ${ACR_LOGIN_SERVER}
          docker build -t ${ACR_LOGIN_SERVER}/${APP_IMAGE_NAME}:${IMAGE_TAG} ./app
          docker push ${ACR_LOGIN_SERVER}/${APP_IMAGE_NAME}:${IMAGE_TAG}

      - name: 4. Get AKS Kubeconfig Credentials
        run: |
          az aks get-credentials --resource-group ${AZURE_RESOURCE_GROUP} --name ${AZURE_AKS_CLUSTER} --overwrite-existing

      - name: 5. Deploy to AKS using Manifests
        run: |
          sed -i "s|__ACR_LOGIN_SERVER__/__APP_IMAGE_NAME__:__IMAGE_TAG__|${ACR_LOGIN_SERVER}/${APP_IMAGE_NAME}:${IMAGE_TAG}|g" k8s/deployment.yml
          kubectl apply -f k8s/service.yml 
          kubectl apply -f k8s/deployment.yml
          
      - name: 6. Deployment Verification & Status Check
        run: |
          echo "Waiting for deployment to become ready..."
          kubectl rollout status deployment/flask-app-deployment --timeout=5m
          echo "Deployment successful! The app is live."
